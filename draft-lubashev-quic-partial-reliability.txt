



QUIC                                                         I. Lubashev
Internet-Draft                                       Akamai Technologies
Intended status: Informational                            April 20, 2018
Expires: October 22, 2018


                  Partially Reliable Streams for QUIC
             draft-lubashev-quic-partial-reliability-latest

Abstract

   This memo introduces MIN_STREAM_DATA and EXPIRED_STREAM_DATA frames
   to enable partial reliability for QUIC streams.  The
   EXPIRED_STREAM_DATA frame allows a sender to give up on
   retransmitting older parts of a stream and to notify the receiver
   about this decision.  The MIN_STREAM_DATA frame allows a receiver to
   express its disinterest in older parts of a stream.  The content of
   this draft is intended for merging into QUIC transport, recovery, and
   applicability drafts as a negotiable extension and/or QUIC Version 2
   transport feature.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 22, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Lubashev                Expires October 22, 2018                [Page 1]

Internet-Draft                   quic-pr                      April 2018


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Notational Conventions  . . . . . . . . . . . . . . . . . . .   2
   2.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  Partially Reliable Streams  . . . . . . . . . . . . . . . . .   3
     3.1.  Min Stream Offset . . . . . . . . . . . . . . . . . . . .   3
     3.2.  Exempt Stream Bytes . . . . . . . . . . . . . . . . . . .   4
   4.  New Frames  . . . . . . . . . . . . . . . . . . . . . . . . .   4
     4.1.  MIN_STREAM_DATA Frame . . . . . . . . . . . . . . . . . .   4
     4.2.  EXPIRED_STREAM_DATA Frame . . . . . . . . . . . . . . . .   5
   5.  Flow Control Update . . . . . . . . . . . . . . . . . . . . .   6
     5.1.  Connection Flow Control . . . . . . . . . . . . . . . . .   7
     5.2.  Sender Flow Control . . . . . . . . . . . . . . . . . . .   7
     5.3.  Receiver Flow Control . . . . . . . . . . . . . . . . . .   7
   6.  Sender Interface and Behavior . . . . . . . . . . . . . . . .   7
   7.  Receiver Interface and Behavior . . . . . . . . . . . . . . .   8
   8.  Retransmission  . . . . . . . . . . . . . . . . . . . . . . .   8
     8.1.  Retransmission of MIN_STREAM_DATA . . . . . . . . . . . .   8
     8.2.  Retransmission of EXPIRED_STREAM_DATA . . . . . . . . . .   9
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   9
   10. Security Considerations . . . . . . . . . . . . . . . . . . .   9
   11. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .   9
   12. Normative References  . . . . . . . . . . . . . . . . . . . .   9
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  10

1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2.  Introduction

   Some applications, especially applications with real-time
   requirements, need a partially reliable transport.  These
   applications typically communicate data in application-specific
   messages that are serialized over QUIC streams.  Applications desire
   partially reliable transport when their messages expire and lose
   their usefulness due to later events (time passing, newer messages,
   etc).






Lubashev                Expires October 22, 2018                [Page 2]

Internet-Draft                   quic-pr                      April 2018


   The content of this draft is intended for [I-D.ietf-quic-transport],
   [I-D.ietf-quic-recovery] and, [I-D.ietf-quic-applicability] as a QUIC
   extension and/or QUIC Version 2.

   The key to partial reliability is notifying the peer about data that
   will not or should not be retransmitted and managing flow control for
   the connection.

3.  Partially Reliable Streams

   It is possible to provide partial reliability without any changes to
   QUIC transport by using QUIC streams, encoding one message per QUIC
   stream.  When the message expires, the sender can reset the stream,
   causing RST_STREAM frame to be transmitted, unless all data in the
   stream has already been fully acknowledged.  Likewise, the receiver
   can send STOP_SENDING frame to indicate its disinterest in the
   message.  The problem with this approach is that messages transmitted
   by the application typically belong to a message stream, and
   applications may need to support multiple concurrent message streams.
   Hence, a message-per-stream approach requires each message to contain
   an extra header portion to associate the message with a logical
   application stream.  In case of short messages, this approach
   introduces a significant overhead due to STREAM frames and message
   headers.  It also places the burden on the application to reorder
   data arriving on multiple QUIC streams.  Furthermore, splitting each
   application stream into multiple QUIC streams renders QUIC per-stream
   flow control ineffective and requires an application to build its
   own.

   An alternative is the proposed single-stream mechanism that keeps
   messages arriving in order on a single stream.

   In this proposal, both the sender and the receiver are able to
   control expiration of messages in a stream.

   This proposal introduces two new QUIC per-stream variables: Min
   Stream Offset (Section 3.1) and Exempt Stream Bytes (Section 3.2).

3.1.  Min Stream Offset

   Min Stream Offset indicates the smallest retransmittable data offset
   for the stream.  The receiver SHOULD NOT wait for any data at offsets
   smaller than Min Stream Offset to be (re-)transmitted by the sender.
   The sender SHOULD NOT send any data at offsets smaller than Min
   Stream Offset.  Initially, Min Stream Offset is 0 for all streams.






Lubashev                Expires October 22, 2018                [Page 3]

Internet-Draft                   quic-pr                      April 2018


3.2.  Exempt Stream Bytes

   Exempt Stream Bytes is the number of bytes sent on the stream that do
   not count toward connection flow control limit.  Initially, Exempt
   Stream Bytes is 0 for all streams.

4.  New Frames

   This introduces new MIN_STREAM_DATA (Section 4.1) and
   EXPIRED_STREAM_DATA (Section 4.2) frames.

4.1.  MIN_STREAM_DATA Frame

   The MIN_STREAM_DATA frame (type=0x??) is used in flow control to
   inform a peer of the maximum amount of data that can be sent on a
   stream (like MAX_STREAM_DATA frame) and update Min Stream Offset
   (Section 3.1) and Exempt Stream Bytes (Section 3.2) for this stream.

   An endpoint that receives a MIN_STREAM_DATA frame for a receive-only
   stream MUST terminate the connection with error PROTOCOL_VIOLATION.

   An endpoint that receives a MIN_STREAM_DATA frame for a send-only
   stream it has not opened MUST terminate the connection with error
   PROTOCOL_VIOLATION.

   Note that an endpoint may legally receive a MIN_STREAM_DATA frame on
   a bidirectional stream it has not opened.

   The frame is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Stream ID (i)                        ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Maximum Stream Data (i)                  ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                   Minimum Stream Offset (i)                 ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Exempt Stream Bytes (i)                  ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The fields in the MIN_STREAM_DATA frame are as follows:

   Stream ID:  The stream ID of the stream that is affected encoded as a
      variable-length integer.





Lubashev                Expires October 22, 2018                [Page 4]

Internet-Draft                   quic-pr                      April 2018


   Maximum Stream Data:  A variable-length integer indicating the
      maximum amount of data that can be sent on the identified stream,
      in units of octets.

   Minimum Stream Offset:  A variable-length integer indicating the
      minimum offset of the stream data that can be sent (or re-
      transmitted) on the identified stream, in units of octets.

   Exempt Stream Bytes:  A variable-length integer indicating the amount
      of data on the identified stream exempt from connection flow
      control, in units of octets.

   The semantics of Maximum Stream Data is identical to that of
   MAX_STREAM_DATA frame.

   Since Stream 0 MUST be reliable, Stream ID MUST NOT be 0.

   Minimum Stream Offset and Exempt Stream Bytes fields update the
   stream's Min Stream Offset and Exempt Stream Bytes upon receipt.

   If current send offset for the stream is less than the new Min Stream
   Offset, the current send offset for the stream is set to be the new
   Min Stream Offset upon receipt.

   The receiver MUST NOT reduce the Maximum Stream Data, Min Stream
   Offset, and Exempt Stream Bytes for the stream, but loss and
   reordering can cause MIN_STREAM_DATA frames to be received out of
   order.  If Maximum Stream Data field does not advance the maximum
   amount of data that can be sent on the stream, or Minimum Stream
   Offset field does not advance Min Stream Offset, or Exempt Stream
   Bytes field does not advance Exempt Stream Bytes, the corresponding
   stream parameter is not updated.  An endpoint MUST terminate a
   connection with a MIN_STREAM_DATA_ERROR error, if one of the three
   fields is advancing its stream parameter, while another field is
   trying to retard its stream parameter.  An endpoint MUST terminate a
   connection with a MIN_STREAM_DATA_ERROR error, if Maximum Stream Data
   is less than Minimum Stream Offset.

4.2.  EXPIRED_STREAM_DATA Frame

   The EXPIRED_STREAM_DATA frame (type=0x??) is used in flow control by
   the sender to inform the receiver of the minimum (re-)transmittable
   data offset on a stream.

   The frame is as follows:






Lubashev                Expires October 22, 2018                [Page 5]

Internet-Draft                   quic-pr                      April 2018


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Stream ID (i)                        ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                  Minimum Stream Offset (i)                  ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The fields in the EXPIRED_STREAM_DATA frame are as follows:

   Stream ID:  The stream ID of the stream that is affected encoded as a
      variable-length integer.

   Minimum Stream Offset:  A variable-length integer indicating the new
      value for the stream's Min Stream Offset (Section 3.1)

   Since Stream 0 MUST be reliable, Stream ID MUST NOT be 0.

   The sender MUST NOT reduce the Minimum Stream Offset for a stream,
   but loss and reordering can cause EXPIRED_STREAM_DATA frames to be
   received out of order.  EXPIRED_STREAM_DATA frames that do not
   increase the stream's Min Stream Offset MUST be ignored.

   Minimum Stream Offset can exceed the stream's maximum data offset.

   Sending EXPIRED_STREAM_DATA frame does not change the stream's
   current send offset.

   An endpoint that receives a EXPIRED_STREAM_DATA frame for a send-only
   stream MUST terminate the connection with error PROTOCOL_VIOLATION.

   Upon receipt, if the largest receive offset for the stream is less
   the Minimum Stream Offset field, the receiver MUST advance the
   stream's Exempt Stream Bytes and the largest receive offset by the
   difference between Minimum Stream Offset field and the largest
   receive offset for this stream.  (This will advance the largest
   receive offset to Minimum Stream Offset.)

5.  Flow Control Update

   Flow control changes are designed to make sure that a sender that
   desires to expire a large number of bytes that have never been
   transmitted can do so efficiently and without closing down the
   connection flow control window (thereby blocking other streams).
   That must be done in a way that does not open up connection flow
   control window, allowing a different stream to use connection credits
   not designed for it.




Lubashev                Expires October 22, 2018                [Page 6]

Internet-Draft                   quic-pr                      April 2018


5.1.  Connection Flow Control

   The connection flow control calculation is redefined as the sum of
   the current stream offsets minus the sum of Exempt Stream Bytes for
   all streams, including closed streams but excluding stream 0.

5.2.  Sender Flow Control

   When an application notifies QUIC transport of the minimum
   retransmittable offset for a stream beyond the current Min Stream
   Offset, sender SHOULD advance Min Stream Offset for the stream.  If
   there is any unacknowledged (including unsent) data at an offset less
   than the new Min Stream Offset, the sender SHOULD transmit a
   EXPIRED_STREAM_DATA frame (Section 4.2).

   If the last sent EXPIRED_STREAM_DATA frame for a stream is declared
   lost, it MUST be retransmitted.

   The sender behavior upon receipt of MIN_STREAM_DATA is described in
   Section 4.1.  It is possible that MIN_STREAM_DATA will update current
   send stream offset and Exempt Stream Bytes for a "half-closed
   (local)" stream.

5.3.  Receiver Flow Control

   Upon receipt of a EXPIRED_STREAM_DATA frame (Section 4.2) that
   advances Min Stream Offset past the largest receive offset for a
   stream, the receiver SHOULD send a MIN_STREAM_DATA frame
   (Section 4.1).

   If a STREAM-with-FIN or an RST_STREAM frame is received with the
   final stream offset less than largest receive offset for a stream, it
   is only an error, if the final receive offset for the stream is less
   than largest offset learned from a STREAM or RST_STREAM frames.

6.  Sender Interface and Behavior

   It is recommended that a QUIC library API provides a way for a sender
   to update the minimum retransmittable offset for a stream.  A typical
   sender would call this API function whenever data previously enqueued
   for transmission expires, per application semantics.  The sender
   would keep track of the message boundaries and request expiration of
   data on a message boundary.

   If all data between the current minimum retransmittable offset and
   the new minimum retransmittable offset has been acknowledged, no
   action is performed by the sender's QUIC transport.  Otherwise, if




Lubashev                Expires October 22, 2018                [Page 7]

Internet-Draft                   quic-pr                      April 2018


   there is unacknowledged data, an EXPIRED_STREAM_DATA frame
   (Section 4.2) is transmitted.

   An application may decide to conditionally expire messages based on
   the delivery status of prior messages.  For example, an application
   sending large messages may wish to ensure that its messages are
   delivered at least at a given minimum rate before expiring a
   partially-delivered message just because there is a newer message to
   deliver.  That is, if the rate of data the application wishes to
   write exceeds the network's throughput, the application may want to
   ensure that at least some messages are delivered in their entirety.
   To support this use case, it is recommended that a QUIC library API
   provides a way for the sender to monitor the smallest unacknowledged
   stream offset greater than the current minimum retransmittable
   offset.

7.  Receiver Interface and Behavior

   The receiver SHOULD assume that none of the data before Min Stream
   Offset (Section 3.1) will be retransmitted.  A receiver MAY discard
   any stream data received for an offset smaller than Min Stream
   Offset.

   It is recommended that a QUIC library API provides a way for a
   receiver application to obtain the length of a gap corresponding to
   the expired data in addition to data octets that follow the gap.

   It is also recommended that a QUIC library API provide a way for a
   receiver application to skip some octets past the current point in
   the stream.  When some of the skipped octets have not, yet, been
   received, the receiver SHOULD advance Min Stream Offset for the
   stream.  If the largest receive offset for the stream is less the new
   Min Stream Offset, the receiver MUST advance the stream's Exempt
   Stream Bytes and the largest receive offset by the difference between
   Min Stream Offset and the largest receive offset for this stream.  If
   the stream's Min Stream Offset has been advanced, the receiver SHOULD
   send a MIN_STREAM_DATA frame (Section 4.1).

8.  Retransmission

   Both MIN_STREAM_DATA and EXPIRED_STREAM_DATA frames MUST be
   retransmitted if declared lost.

8.1.  Retransmission of MIN_STREAM_DATA

   The most recent MIN_STREAM_DATA frame MUST be retransmitted until the
   receiver is certain that the sender is not going to transmit any
   skipped data.  I.e. the frame MUST be retransmitted until the stream



Lubashev                Expires October 22, 2018                [Page 8]

Internet-Draft                   quic-pr                      April 2018


   enters "half-closed (remote)" state, or all data between the largest
   Minimum Stream Offset in an acknowledged MIN_STREAM_DATA frame and
   the current Min Stream Offset has been received, or all data between
   the largest Minimum Stream Offset in a received EXPIRED_STREAM_DATA
   frame and the current Min Stream Offset has been received.

8.2.  Retransmission of EXPIRED_STREAM_DATA

   The most recent EXPIRED_STREAM_DATA frame for a stream MUST be
   retransmitted until the sender is certain that the receiver is not
   expecting retransmission of any expired data.  I.e. the frame MUST be
   retransmitted until the stream enters "half-closed (local)" state, or
   all data between the largest Minimum Stream Offset in an acknowledged
   EXPIRED_STREAM_DATA frame and the current Min Stream Offset has been
   acknowledged, or all data between the largest Minimum Stream Offset
   in a received MIN_STREAM_DATA frame and the current Min Stream Offset
   has been acknowledged.

9.  IANA Considerations

   This document has no actions for IANA.

10.  Security Considerations

   This document has no new security considerations.

11.  Acknowledgments

   Many thanks to Mike Bishop and Ian Swett for their feedback on flow
   control issues.  Thus draft could not happen without Subodh Iyengar's
   ideas for receiver-controlled MIN_STREAM_DATA.  Kudos to the QUIC
   working group for a mountain of feedback on this draft and for
   diligently plowing through hard problems, making thousands of big and
   small decisions, to make the Internet better for everyone.

12.  Normative References

   [I-D.ietf-quic-applicability]
              Kuehlewind, M. and B. Trammell, "Applicability of the QUIC
              Transport Protocol", draft-ietf-quic-applicability-01
              (work in progress), October 2017.

   [I-D.ietf-quic-recovery]
              Iyengar, J. and I. Swett, "QUIC Loss Detection and
              Congestion Control", draft-ietf-quic-recovery-11 (work in
              progress), April 2018.





Lubashev                Expires October 22, 2018                [Page 9]

Internet-Draft                   quic-pr                      April 2018


   [I-D.ietf-quic-transport]
              Iyengar, J. and M. Thomson, "QUIC: A UDP-Based Multiplexed
              and Secure Transport", draft-ietf-quic-transport-11 (work
              in progress), April 2018.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

Author's Address

   Igor Lubashev
   Akamai Technologies

   EMail: igorlord@alum.mit.edu



































Lubashev                Expires October 22, 2018               [Page 10]
